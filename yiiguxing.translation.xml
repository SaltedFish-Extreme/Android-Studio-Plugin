<application>
  <component name="AppStorage">
    <option name="newTranslationDialogCollapseDictViewer" value="false" />
    <option name="newTranslationDialogWidth" value="388" />
    <option name="newTranslationDialogX" value="727" />
    <option name="newTranslationDialogY" value="615" />
    <option name="pinNewTranslationDialog" value="true" />
    <histories>
      <item value="arrow" />
      <item value="background Tint" />
      <item value="A drawable to use as the background. This can be either a reference to a full drawable resource (such as a PNG image, 9-patch, XML state list description, etc), or a solid color such as &quot;ff000000&quot; (black)" />
      <item value="Sets a drawable as the content of this ImageView. Allows the use of vector drawable when running on older versions of the platform" />
      <item value="Shape Text View" />
      <item value="m Junk Times" />
      <item value="rect" />
      <item value="矩形" />
      <item value="椭圆" />
      <item value="user Control Set Top" />
      <item value="Classify" />
      <item value="classify" />
      <item value="Classify Response" />
      <item value="Classification" />
      <item value="Classification Response" />
      <item value="体系" />
      <item value="系统片段" />
      <item value="System Fragment" />
      <item value="Knowledge Tree Fragment" />
      <item value="override fun onItemViewHolderCreated(viewHolder: BaseViewHolder, viewType: Int) { super.onItemViewHolderCreated(viewHolder, viewType) viewHolder.getView&lt;RevealLayout&gt;(R.id.item_article_collect).setOnCheckedChangeListener { _, isChecked -&gt; 选中状态改变监听 if (isChecked) ToastUtils.debugShow(&quot;喜欢！{data[viewHolder.adapterPosition].id}&quot;) else ToastUtils.debugShow(&quot;不喜欢！&quot;) } }" />
      <item value="identical 10 lines" />
      <item value="smooth Scroll To Position" />
      <item value="link Left Right" />
      <item value="left Right Link" />
      <item value="index Distance" />
      <item value="Current Index" />
      <item value="Left TabLayout and Right RecyclerView Link" />
      <item value="Right RecyclerView link Left TabLayout" />
      <item value="SCROLL STATE IDLE" />
      <item value="override fun onResume() { super.onResume() if (mFirst) { scopeNetLife { 获取导航数据 val mNavigationData = Get&lt;ApiResponse&lt;ArrayList&lt;NavigationResponse&gt;&gt;&gt;(NetApi.NavigationAPI).await() verticalTabLayout.setTabAdapter(NavigationTabAdapter(mNavigationData.data)) leftLinkRight() rv.layoutManager = linearLayoutManager rv.adapter = NavigationContentAdapter(mNavigationData.data) mFirst = false } } } 左边标签链接右边rv private fun leftLinkRight() { rv.addOnScrollListener(object : RecyclerView.OnScrollListener() { override fun onScrollStateChanged(recyclerView: RecyclerView, newState: Int) { super.onScrollStateChanged(recyclerView, newState) if (mScroll &amp;&amp; (newState == RecyclerView.SCROLL_STATE_IDLE)) { scrollRecyclerView() } rightLinkLeft(newState) } override fun onScrolled(recyclerView: RecyclerView, dx: Int, dy: Int) { super.onScrolled(recyclerView, dx, dy) if (mScroll) { scrollRecyclerView() } } }) verticalTabLayout.addOnTabSelectedListener(object : VerticalTabLayout.OnTabSelectedListener { override fun onTabReselected(tab: TabView?, position: Int) { } override fun onTabSelected(tab: TabView?, position: Int) { mClickTab = true selectTab(position) } }) } private fun scrollRecyclerView() { mScroll = false val indexDistance: Int = mCurrentIndex - linearLayoutManager.findFirstVisibleItemPosition() if (indexDistance &gt; 0 &amp;&amp; indexDistance &lt; rv.childCount) { val top: Int = rv.getChildAt(indexDistance).top rv.smoothScrollBy(0, top) } } 右边rv链接左边标签 @param newState rv滚动状态 private fun rightLinkLeft(newState: Int) { if (newState == RecyclerView.SCROLL_STATE_IDLE) { if (mClickTab) { mClickTab = false return } val firstPosition: Int = linearLayoutManager.findFirstVisibleItemPosition() if (firstPosition != mCurrentIndex) { mCurrentIndex = firstPosition setChecked(mCurrentIndex) } } } 平滑右边rv，以选择左边标签 @param position 位置 private fun setChecked(position: Int) { if (mClickTab) { mClickTab = false } else { verticalTabLayout.setTabSelected(mCurrentIndex) } mCurrentIndex = position } 选择左边标签，以平滑右边rv @param position 位置 private fun selectTab(position: Int) { mCurrentIndex = position rv.stopScroll() smoothScrollToPosition(position) } private fun smoothScrollToPosition(position: Int) { val firstPosition: Int = linearLayoutManager.findFirstVisibleItemPosition() val lastPosition: Int = linearLayoutManager.findLastVisibleItemPosition() when { position &lt;= firstPosition -&gt; { rv.smoothScrollToPosition(position) } position &lt;= lastPosition -&gt; { val top: Int = rv.getChildAt(position - firstPosition).top rv.smoothScrollBy(0, top) } else -&gt; { rv.smoothScrollToPosition(position) mScroll = true } } }" />
      <item value="Background concurrent copying GC freed 171530(8986KB) AllocSpace objects, 363(7260KB) LOS objects, 49% free, 15MB30MB, paused 92us total 112.573ms" />
      <item value="Reducing the number of considered missed Gc histogram windows from 109 to 100" />
      <item value="linear Layout Manager" />
      <item value="RecyclerView Scroll State" />
      <item value="Smooth Right RecyclerView to Select Left TabLayout" />
      <item value="Recycler View" />
      <item value="Select Left TabLayout to Smooth Right RecyclerView" />
      <item value="Shape View" />
      <item value="flexbox" />
      <item value="Implement this method and use the helper to adapt the view to the given item." />
      <item value="Illegal State Exception" />
      <item value="identical 1 line" />
      <item value="Please get it after onAttachedToRecyclerView()" />
      <item value="jank mJunkTimes = 31" />
      <item value="selectable Item Background" />
      <item value="legacy" />
      <item value="Tab Layout" />
      <item value="scrollable" />
      <item value="fixed" />
      <item value="light silver" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="909" />
        <entry key="ENGLISH" value="910" />
        <entry key="IRISH" value="2" />
        <entry key="BASQUE" value="3" />
        <entry key="DANISH" value="1" />
        <entry key="RUSSIAN" value="1" />
        <entry key="FRENCH" value="6" />
        <entry key="FILIPINO" value="1" />
        <entry key="DUTCH" value="1" />
        <entry key="CZECH" value="1" />
        <entry key="LATIN" value="1" />
        <entry key="LUXEMBOURGISH" value="1" />
        <entry key="ROMANIAN" value="5" />
        <entry key="MARATHI" value="2" />
        <entry key="BENGALI" value="2" />
        <entry key="NORWEGIAN" value="4" />
        <entry key="PORTUGUESE" value="1" />
        <entry key="SWEDISH" value="1" />
        <entry key="SPANISH" value="3" />
        <entry key="ITALIAN" value="2" />
        <entry key="HINDI" value="1" />
        <entry key="INDONESIAN" value="1" />
        <entry key="VIETNAMESE" value="2" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1643524618522" />
  </component>
  <component name="Settings">
    <option name="translateDocumentation" value="true" />
  </component>
</application>